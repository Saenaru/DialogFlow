from vk_api import VkApi
from vk_api.bot_longpoll import VkBotLongPoll, VkBotEventType
from google.cloud import dialogflow
from google.oauth2 import service_account
from dotenv import load_dotenv
import os
import logging
import random
import time

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(),
        logging.FileHandler('vk_bot.log', encoding='utf-8')
    ]
)
logger = logging.getLogger(__name__)


load_dotenv()

VK_GROUP_TOKEN = os.getenv('VK_GROUP_TOKEN')
VK_GROUP_ID = os.getenv('VK_GROUP_ID')
DIALOGFLOW_PROJECT_ID = os.getenv('DIALOGFLOW_PROJECT_ID')
DIALOGFLOW_KEY_FILE = "newagent-ucxn-8332c4ae589a.json"

def get_dialogflow_response(text, session_id, language_code='ru'):
    try:
        logger.info(f"Dialogflow –∑–∞–ø—Ä–æ—Å: {text} –¥–ª—è —Å–µ—Å—Å–∏–∏ {session_id}")
        
        credentials = service_account.Credentials.from_service_account_file(DIALOGFLOW_KEY_FILE)
        session_client = dialogflow.SessionsClient(credentials=credentials)
        session = session_client.session_path(DIALOGFLOW_PROJECT_ID, session_id)
        
        text_input = dialogflow.TextInput(text=text, language_code=language_code)
        query_input = dialogflow.QueryInput(text=text_input)
        
        response = session_client.detect_intent(
            session=session, 
            query_input=query_input
        )
        
        result = response.query_result
        is_fallback = result.intent.is_fallback
        
        logger.info(f"Dialogflow –æ—Ç–≤–µ—Ç: {result.fulfillment_text}")
        logger.info(f"–≠—Ç–æ fallback-–∏–Ω—Ç–µ–Ω—Ç: {is_fallback}")
        
        return result.fulfillment_text, is_fallback
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ Dialogflow: {e}")
        return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.", True

class VKBot:
    def __init__(self, group_token, group_id):
        try:
            logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è VK –±–æ—Ç–∞...")
            self.vk_session = VkApi(token=group_token)
            self.vk = self.vk_session.get_api()
            self.longpoll = VkBotLongPoll(self.vk_session, group_id)
            logger.info("VK –±–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ VK –±–æ—Ç–∞: {e}")
            raise
    
    def send_message(self, user_id, message):
        try:
            self.vk.messages.send(
                user_id=user_id,
                message=message,
                random_id=random.randint(1, 10000)
            )
            logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
    
    def handle_start(self, user_id):
        welcome_message = (
            "–ü—Ä–∏–≤–µ—Ç! –Ø —É–º–Ω—ã–π –±–æ—Ç —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π Dialogflow. "
            "–ó–∞–¥–∞–π—Ç–µ –º–Ω–µ –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å! –ï—Å–ª–∏ —è –Ω–µ —Å–º–æ–≥—É –ø–æ–º–æ—á—å, "
            "–≤–∞–º –æ—Ç–≤–µ—Ç–∏—Ç –æ–ø–µ—Ä–∞—Ç–æ—Ä —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∏."
        )
        self.send_message(user_id, welcome_message)
    
    def handle_message(self, user_id, text):
        response_text, is_fallback = get_dialogflow_response(text, str(user_id))
        
        if is_fallback:
            logger.info(f"Fallback-–∏–Ω—Ç–µ–Ω—Ç –æ–±–Ω–∞—Ä—É–∂–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}. –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è.")
            return
        
        self.send_message(user_id, response_text)
    
    def run(self):
        logger.info("ü§ñ VK –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
        
        while True:
            try:
                logger.info("–û–∂–∏–¥–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π LongPoll...")
                for event in self.longpoll.listen():
                    if event.type == VkBotEventType.MESSAGE_NEW:
                        message = event.object.message
                        user_id = message['from_id']
                        text = message['text'].strip()
                        
                        logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user_id}: {text}")
                        
                        if text.lower() in ['/start', 'start', '–Ω–∞—á–∞—Ç—å', '—Å—Ç–∞—Ä—Ç', '–ø—Ä–∏–≤–µ—Ç']:
                            self.handle_start(user_id)
                        else:
                            self.handle_message(user_id, text)
                            
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ: {e}")
                logger.info("–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥...")
                time.sleep(10)

def check_environment():
    errors = []
    
    if not VK_GROUP_TOKEN:
        errors.append("‚ùå VK_GROUP_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
    
    if not VK_GROUP_ID:
        errors.append("‚ùå VK_GROUP_ID –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
    
    if not DIALOGFLOW_PROJECT_ID:
        errors.append("‚ùå DIALOGFLOW_PROJECT_ID –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
    
    if not os.path.exists(DIALOGFLOW_KEY_FILE):
        errors.append(f"‚ùå –§–∞–π–ª {DIALOGFLOW_KEY_FILE} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
    
    if VK_GROUP_ID and not VK_GROUP_ID.isdigit():
        errors.append("‚ùå VK_GROUP_ID –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã!")
    
    return errors

def main():
    logger.info("=== –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è ===")
    
    errors = check_environment()
    if errors:
        for error in errors:
            logger.error(error)
        return
    
    logger.info("‚úÖ –í—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")
    
    logger.info(f"VK_GROUP_ID: {VK_GROUP_ID}")
    logger.info(f"DIALOGFLOW_PROJECT_ID: {DIALOGFLOW_PROJECT_ID}")
    logger.info(f"DIALOGFLOW_KEY_FILE —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {os.path.exists(DIALOGFLOW_KEY_FILE)}")
    
    try:
        bot = VKBot(VK_GROUP_TOKEN, VK_GROUP_ID)
        logger.info("‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω, –∑–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ü–∏–∫–ª–∞...")
        bot.run()
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")

if __name__ == '__main__':
    main()