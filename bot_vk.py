from vk_api import VkApi
from vk_api.bot_longpoll import VkBotLongPoll, VkBotEventType
import os
import logging
import random
import time
from dialogflow_utils import setup_logging, send_alert, get_dialogflow_response
from dotenv import load_dotenv

logger = logging.getLogger(__name__)


def send_message(vk_api, user_id, message, monitoring_config):
    try:
        vk_api.messages.send(
            user_id=user_id,
            message=message,
            random_id=random.randint(1, 10000)
        )
        logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
    except Exception as e:
        error_msg = f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}"
        logger.error(error_msg)
        send_alert(error_msg, "ERROR", "VK Bot", monitoring_config)


def handle_start(vk_api, user_id, monitoring_config):
    welcome_message = (
        "–ü—Ä–∏–≤–µ—Ç!"
        "–ó–∞–¥–∞–π—Ç–µ –º–Ω–µ –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å! –ï—Å–ª–∏ —è –Ω–µ —Å–º–æ–≥—É –ø–æ–º–æ—á—å, "
        "–≤–∞–º –æ—Ç–≤–µ—Ç–∏—Ç –æ–ø–µ—Ä–∞—Ç–æ—Ä —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∏."
    )
    send_message(vk_api, user_id, welcome_message, monitoring_config)


def handle_user_message(vk_api, user_id, text, dialogflow_config, monitoring_config):
    session_id = f"vk-{user_id}"
    response_text, is_fallback = get_dialogflow_response(
        text, 
        session_id,
        dialogflow_config,
        platform='vk'
    )
    if is_fallback:
        logger.info(f"Fallback-–∏–Ω—Ç–µ–Ω—Ç –æ–±–Ω–∞—Ä—É–∂–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}. –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è.")
        return
    send_message(vk_api, user_id, response_text, monitoring_config)


def initialize_vk_bot(vk_group_token, vk_group_id, dialogflow_config, monitoring_config):
    logger.info("ü§ñ VK –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    try:
        logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è VK –±–æ—Ç–∞...")
        vk_session = VkApi(token=vk_group_token)
        vk_api = vk_session.get_api()
        longpoll = VkBotLongPoll(vk_session, vk_group_id)
        group_info = vk_api.groups.getById(group_id=vk_group_id)
        group_name = group_info[0]['name'] if group_info else 'Unknown'
        logger.info(f"VK –±–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è –≥—Ä—É–ø–ø—ã: {group_name}")
        send_alert(
            f"‚úÖ VK Bot —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!\n"
            f"üë• –ì—Ä—É–ø–ø–∞: {group_name}\n"
            f"üÜî ID: {vk_group_id}\n"
            f"üìä –°—Ç–∞—Ç—É—Å: –ê–∫—Ç–∏–≤–µ–Ω –∏ —Å–ª—É—à–∞–µ—Ç —Å–æ–±—ã—Ç–∏—è",
            "INFO",
            "VK Bot",
            monitoring_config
        )
        logger.info("‚úÖ VK Bot —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
        return vk_api, longpoll
    except Exception as e:
        error_msg = f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ VK –±–æ—Ç–∞: {e}"
        logger.error(error_msg)
        send_alert(error_msg, "ERROR", "VK Bot", monitoring_config)
        return None, None


def run_bot_loop(vk_api, longpoll, dialogflow_config, monitoring_config):
    while True:
        try:
            logger.info("–û–∂–∏–¥–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π LongPoll...")
            for event in longpoll.listen():
                if event.type == VkBotEventType.MESSAGE_NEW:
                    message = event.object.message
                    user_id = message['from_id']
                    text = message['text'].strip()
                    logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user_id}: {text}")
                    if text.lower() in ['/start', 'start', '–Ω–∞—á–∞—Ç—å', '—Å—Ç–∞—Ä—Ç', '–ø—Ä–∏–≤–µ—Ç']:
                        handle_start(vk_api, user_id, monitoring_config)
                    else:
                        handle_user_message(vk_api, user_id, text, dialogflow_config, monitoring_config)

        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ VK Bot: {e}"
            logger.error(error_msg)
            send_alert(error_msg, "ERROR", "VK Bot", monitoring_config)
            logger.info("–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥...")
            time.sleep(10)


def main():
    load_dotenv()
    setup_logging()
    logger.info("=== –ó–∞–ø—É—Å–∫ VK Bot ===")
    vk_group_token = os.getenv('VK_GROUP_TOKEN')
    vk_group_id = os.getenv('VK_GROUP_ID')
    monitoring_token = os.getenv('MONITORING_BOT_TOKEN')
    admin_chat_id = os.getenv('ADMIN_CHAT_ID')
    dialogflow_project_id = os.getenv('DIALOGFLOW_PROJECT_ID')
    dialogflow_key_file = os.getenv('DIALOGFLOW_KEY_FILE')

    if not all([vk_group_token, vk_group_id, monitoring_token, admin_chat_id, dialogflow_project_id, dialogflow_key_file]):
        error_msg = "‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–¥–Ω–∞ –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è"
        logger.error(error_msg)
        return

    if not os.path.exists(dialogflow_key_file):
        error_msg = f"‚ùå –§–∞–π–ª {dialogflow_key_file} –Ω–µ –Ω–∞–π–¥–µ–Ω!"
        logger.error(error_msg)
        return

    monitoring_config = {
        'token': monitoring_token,
        'admin_chat_id': admin_chat_id
    }

    dialogflow_config = {
        'project_id': dialogflow_project_id,
        'key_file': dialogflow_key_file
    }

    vk_api, longpoll = initialize_vk_bot(vk_group_token, vk_group_id, dialogflow_config, monitoring_config)
    if vk_api and longpoll:
        run_bot_loop(vk_api, longpoll, dialogflow_config, monitoring_config)


if __name__ == '__main__':
    main()