from vk_api import VkApi
from vk_api.bot_longpoll import VkBotLongPoll, VkBotEventType
from google.cloud import dialogflow
from google.oauth2 import service_account
from dotenv import load_dotenv
import os
import logging
import random
import time
import requests

logger = logging.getLogger(__name__)


def setup_logging():
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
        handlers=[
            logging.StreamHandler(),
        ]
    )


def send_alert(message, level="INFO", bot_name="VK Bot"):
    MONITORING_BOT_TOKEN = os.getenv('MONITORING_BOT_TOKEN')
    ADMIN_CHAT_ID = os.getenv('ADMIN_CHAT_ID')
    
    if not MONITORING_BOT_TOKEN or not ADMIN_CHAT_ID:
        return
    try:
        formatted_message = f"üîî *{level} - {bot_name}*\n\n{message}"
        url = f"https://api.telegram.org/bot{MONITORING_BOT_TOKEN}/sendMessage"
        payload = {
            'chat_id': ADMIN_CHAT_ID,
            'text': formatted_message,
            'parse_mode': 'Markdown'
        }
        response = requests.post(url, json=payload, timeout=10)
        response.raise_for_status()
        logger.info(f"Alert –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: {level}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ alert: {e}")


def get_dialogflow_response(text, session_id, language_code='ru'):
    DIALOGFLOW_PROJECT_ID = os.getenv('DIALOGFLOW_PROJECT_ID')
    DIALOGFLOW_KEY_FILE = os.getenv('DIALOGFLOW_KEY_FILE')
    try:
        platform_session_id = f"vk-{session_id}"
        logger.info(f"Dialogflow –∑–∞–ø—Ä–æ—Å: {text} –¥–ª—è —Å–µ—Å—Å–∏–∏ {platform_session_id}")
        credentials = service_account.Credentials.from_service_account_file(DIALOGFLOW_KEY_FILE)
        session_client = dialogflow.SessionsClient(credentials=credentials)
        session = session_client.session_path(DIALOGFLOW_PROJECT_ID, platform_session_id)
        text_input = dialogflow.TextInput(text=text, language_code=language_code)
        query_input = dialogflow.QueryInput(text=text_input)
        response = session_client.detect_intent(
            session=session,
            query_input=query_input
        )
        result = response.query_result
        is_fallback = result.intent.is_fallback
        logger.info(f"Dialogflow –æ—Ç–≤–µ—Ç: {result.fulfillment_text}")
        logger.info(f"–≠—Ç–æ fallback-–∏–Ω—Ç–µ–Ω—Ç: {is_fallback}")
        return result.fulfillment_text, is_fallback
    except Exception as e:
        error_msg = f"–û—à–∏–±–∫–∞ Dialogflow: {e}"
        logger.error(error_msg)
        send_alert(error_msg, "ERROR", "VK Bot")
        return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.", True


def send_message(vk_api, user_id, message):
    try:
        vk_api.messages.send(
            user_id=user_id,
            message=message,
            random_id=random.randint(1, 10000)
        )
        logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
    except Exception as e:
        error_msg = f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}"
        logger.error(error_msg)
        send_alert(error_msg, "ERROR", "VK Bot")


def handle_start(vk_api, user_id):
    welcome_message = (
        "–ü—Ä–∏–≤–µ—Ç!"
        "–ó–∞–¥–∞–π—Ç–µ –º–Ω–µ –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å! –ï—Å–ª–∏ —è –Ω–µ —Å–º–æ–≥—É –ø–æ–º–æ—á—å, "
        "–≤–∞–º –æ—Ç–≤–µ—Ç–∏—Ç –æ–ø–µ—Ä–∞—Ç–æ—Ä —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∏."
    )
    send_message(vk_api, user_id, welcome_message)


def handle_user_message(vk_api, user_id, text):
    response_text, is_fallback = get_dialogflow_response(text, str(user_id))
    if is_fallback:
        logger.info(f"Fallback-–∏–Ω—Ç–µ–Ω—Ç –æ–±–Ω–∞—Ä—É–∂–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}. –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è.")
        return
    send_message(vk_api, user_id, response_text)


def initialize_vk_bot():
    VK_GROUP_TOKEN = os.getenv('VK_GROUP_TOKEN')
    VK_GROUP_ID = os.getenv('VK_GROUP_ID')
    
    logger.info("ü§ñ VK –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    try:
        logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è VK –±–æ—Ç–∞...")
        vk_session = VkApi(token=VK_GROUP_TOKEN)
        vk_api = vk_session.get_api()
        longpoll = VkBotLongPoll(vk_session, VK_GROUP_ID)
        group_info = vk_api.groups.getById(group_id=VK_GROUP_ID)
        group_name = group_info[0]['name'] if group_info else 'Unknown'
        logger.info(f"VK –±–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è –≥—Ä—É–ø–ø—ã: {group_name}")
        send_alert(
            f"‚úÖ VK Bot —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!\n"
            f"üë• –ì—Ä—É–ø–ø–∞: {group_name}\n"
            f"üÜî ID: {VK_GROUP_ID}\n"
            f"üìä –°—Ç–∞—Ç—É—Å: –ê–∫—Ç–∏–≤–µ–Ω –∏ —Å–ª—É—à–∞–µ—Ç —Å–æ–±—ã—Ç–∏—è",
            "INFO",
            "VK Bot"
        )
        logger.info("‚úÖ VK Bot —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
        return vk_api, longpoll
    except Exception as e:
        error_msg = f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ VK –±–æ—Ç–∞: {e}"
        logger.error(error_msg)
        send_alert(error_msg, "ERROR", "VK Bot")
        return None, None


def run_bot_loop(vk_api, longpoll):
    while True:
        try:
            logger.info("–û–∂–∏–¥–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π LongPoll...")
            for event in longpoll.listen():
                if event.type == VkBotEventType.MESSAGE_NEW:
                    message = event.object.message
                    user_id = message['from_id']
                    text = message['text'].strip()
                    logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user_id}: {text}")
                    if text.lower() in ['/start', 'start', '–Ω–∞—á–∞—Ç—å', '—Å—Ç–∞—Ä—Ç', '–ø—Ä–∏–≤–µ—Ç']:
                        handle_start(vk_api, user_id)
                    else:
                        handle_user_message(vk_api, user_id, text)

        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ VK Bot: {e}"
            logger.error(error_msg)
            send_alert(error_msg, "ERROR", "VK Bot")
            logger.info("–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥...")
            time.sleep(10)


def main():
    load_dotenv()
    setup_logging()

    logger.info("=== –ó–∞–ø—É—Å–∫ VK Bot ===")

    VK_GROUP_TOKEN = os.getenv('VK_GROUP_TOKEN')
    VK_GROUP_ID = os.getenv('VK_GROUP_ID')
    DIALOGFLOW_PROJECT_ID = os.getenv('DIALOGFLOW_PROJECT_ID')
    DIALOGFLOW_KEY_FILE = os.getenv('DIALOGFLOW_KEY_FILE')

    if not VK_GROUP_TOKEN:
        error_msg = "‚ùå VK_GROUP_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω!"
        logger.error(error_msg)
        send_alert(error_msg, "ERROR", "VK Bot")
        return

    if not VK_GROUP_ID:
        error_msg = "‚ùå VK_GROUP_ID –Ω–µ –Ω–∞–π–¥–µ–Ω!"
        logger.error(error_msg)
        send_alert(error_msg, "ERROR", "VK Bot")
        return

    if not DIALOGFLOW_PROJECT_ID:
        error_msg = "‚ùå DIALOGFLOW_PROJECT_ID –Ω–µ –Ω–∞–π–¥–µ–Ω!"
        logger.error(error_msg)
        send_alert(error_msg, "ERROR", "VK Bot")
        return

    if not os.path.exists(DIALOGFLOW_KEY_FILE):
        error_msg = f"‚ùå –§–∞–π–ª {DIALOGFLOW_KEY_FILE} –Ω–µ –Ω–∞–π–¥–µ–Ω!"
        logger.error(error_msg)
        send_alert(error_msg, "ERROR", "VK Bot")
        return

    vk_api, longpoll = initialize_vk_bot()
    if vk_api and longpoll:
        run_bot_loop(vk_api, longpoll)


if __name__ == '__main__':
    main()