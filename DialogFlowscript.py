import requests
from google.cloud import dialogflow
from google.oauth2 import service_account

DIALOGFLOW_KEY_FILE = "newagent-ucxn-8332c4ae589a.json"
DIALOGFLOW_PROJECT_ID = "newagent-ucxn"

JSON_URL = "https://dvmn.org/media/filer_public/a7/db/a7db66c0-1259-4dac-9726-2d1fa9c44f20/questions.json"


def download_json(url):
    response = requests.get(url)
    response.raise_for_status()
    return response.json()


def delete_existing_intents():
    print("üóëÔ∏è –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∏–Ω—Ç–µ–Ω—Ç—ã...")
    credentials = service_account.Credentials.from_service_account_file(DIALOGFLOW_KEY_FILE)
    intents_client = dialogflow.IntentsClient(credentials=credentials)
    parent = f"projects/{DIALOGFLOW_PROJECT_ID}/agent"

    try:
        intents = intents_client.list_intents(parent=parent)
        for intent in intents:
            if intent.display_name != "Default Welcome Intent" and intent.display_name != "Default Fallback Intent":
                intents_client.delete_intent(name=intent.name)
                print(f"   –£–¥–∞–ª–µ–Ω –∏–Ω—Ç–µ–Ω—Ç: {intent.display_name}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∏–Ω—Ç–µ–Ω—Ç–æ–≤: {e}")


def create_intent(display_name, training_phrases, answer):
    credentials = service_account.Credentials.from_service_account_file(DIALOGFLOW_KEY_FILE)
    intents_client = dialogflow.IntentsClient(credentials=credentials)
    display_name = display_name.lower().replace(' ', '_')[:64]
    training_phrase_objects = []
    for phrase in training_phrases:
        part = dialogflow.Intent.TrainingPhrase.Part(text=phrase)
        training_phrase = dialogflow.Intent.TrainingPhrase(parts=[part])
        training_phrase_objects.append(training_phrase)
    text = dialogflow.Intent.Message.Text(text=[answer])
    message = dialogflow.Intent.Message(text=text)
    intent = dialogflow.Intent(
        display_name=display_name,
        training_phrases=training_phrase_objects,
        messages=[message]
    )
    parent = f"projects/{DIALOGFLOW_PROJECT_ID}/agent"
    response = intents_client.create_intent(
        request={
            "parent": parent,
            "intent": intent,
            "language_code": "ru"
        }
    )
    return response


def import_intents_from_url():
    print("üì• –°–∫–∞—á–∏–≤–∞–µ–º JSON —Ñ–∞–π–ª...")
    try:
        data = download_json(JSON_URL)
        print(f"‚úÖ JSON –∑–∞–≥—Ä—É–∂–µ–Ω. –ù–∞–π–¥–µ–Ω–æ –∏–Ω—Ç–µ–Ω—Ç–æ–≤: {len(data)}")
        delete_existing_intents()
        for intent_name, intent_data in data.items():
            print(f"üîÑ –°–æ–∑–¥–∞–µ–º –∏–Ω—Ç–µ–Ω—Ç: {intent_name}")
            try:
                response = create_intent(
                    display_name=intent_name,
                    training_phrases=intent_data['questions'],
                    answer=intent_data['answer']
                )
                print(f"‚úÖ –ò–Ω—Ç–µ–Ω—Ç '{intent_name}' —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!")
                print(f"   üìö Training phrases: {len(intent_data['questions'])}")
                print(f"   üí¨ –û—Ç–≤–µ—Ç: {intent_data['answer'][:50]}...")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–Ω—Ç–µ–Ω—Ç–∞ '{intent_name}': {e}")
                continue
        print("üéâ –ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!")
        print("\n‚ö†Ô∏è  –ù–µ –∑–∞–±—É–¥—å—Ç–µ –û–ü–£–ë–õ–ò–ö–û–í–ê–¢–¨ –∞–≥–µ–Ω—Ç–∞ –≤ Dialogflow Console!")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")


def preview_intents():
    print("üëÄ –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –∏–Ω—Ç–µ–Ω—Ç–æ–≤:")

    try:
        data = download_json(JSON_URL)
        for intent_name, intent_data in data.items():
            print(f"\nüìã –ò–Ω—Ç–µ–Ω—Ç: {intent_name}")
            print(f"   ‚ùì –í–æ–ø—Ä–æ—Å—ã: {len(intent_data['questions'])}")
            for i, question in enumerate(intent_data['questions'][:3]):
                print(f"      {i+1}. {question}")
            if len(intent_data['questions']) > 3:
                print(f"      ... –∏ –µ—â–µ {len(intent_data['questions']) - 3} –≤–æ–ø—Ä–æ—Å–æ–≤")
            print(f"   üí¨ –û—Ç–≤–µ—Ç: {intent_data['answer'][:100]}...")

        print(f"\nüìä –í—Å–µ–≥–æ –∏–Ω—Ç–µ–Ω—Ç–æ–≤: {len(data)}")
        print(f"üìù –í—Å–µ–≥–æ –≤–æ–ø—Ä–æ—Å–æ–≤: {sum(len(data[i]['questions']) for i in data)}")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")


if __name__ == '__main__':
    print("ü§ñ –ò–º–ø–æ—Ä—Ç –∏–Ω—Ç–µ–Ω—Ç–æ–≤ –≤ Dialogflow")
    print("=" * 50)
    preview_intents()
    print("\n" + "=" * 50)
    choice = input("\n–•–æ—Ç–∏—Ç–µ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–Ω—Ç–µ–Ω—Ç—ã? (y/n): ")
    if choice.lower() == 'y':
        print("\nüîÑ –ù–∞—á–∏–Ω–∞–µ–º –∏–º–ø–æ—Ä—Ç...")
        print("‚ö†Ô∏è  –≠—Ç–æ —É–¥–∞–ª–∏—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∏–Ω—Ç–µ–Ω—Ç—ã –∏ —Å–æ–∑–¥–∞—Å—Ç –Ω–æ–≤—ã–µ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.")
        confirm = input("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (y/n): ")
        if confirm.lower() == 'y':
            import_intents_from_url()
        else:
            print("üëã –ò–º–ø–æ—Ä—Ç –æ—Ç–º–µ–Ω–µ–Ω")
    else:
        print("üëã –ò–º–ø–æ—Ä—Ç –æ—Ç–º–µ–Ω–µ–Ω")
